<?php

/**
 * @file
 * Contains autotag.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function autotag_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the autotag module.
    case 'help.page.autotag':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Implements the Tags API to help link entities to terms already present on a site.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function autotag_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_type_add_form' || $form_id == 'node_type_edit_form') {
    $entityManager = Drupal::service('entity.manager');
    $source_fields = array();
    $destination_fields = array();

    $form['autotag'] = array(
      '#type' => 'details',
      '#group' => 'additional_settings',
      '#title' => t('Autotag'),
    );

    $type = $form['type']['#default_value'];

    $fields = $entityManager->getFieldDefinitions('node', $type);

    foreach ($fields as $field) {
      if ($field->getType() == 'text_with_summary' || $field->getType() == 'text_long') {
        $source_fields[$field->getName()] = $field->getLabel();
      }
      if ($field->getType() == 'entity_reference' && $field->getSettings()['target_type'] == 'taxonomy_term') {
        $destination_fields[$field->getName()] = $field->getLabel();
      }
    }
    if ($type) {
      $default_source = \Drupal::config('autotag.type.' . $type)->get('source');
      $default_destination = \Drupal::config('autotag.type.' . $type)->get('destination');
    }

    $form['autotag']['autotag_source_field'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Source fields to get text:'),
      '#default_value' => $default_source,
      '#options' => $source_fields,
      '#access' => TRUE,
    );

    $form['autotag']['autotag_destination_field'] = array(
      '#type' => 'select',
      '#title' => t('Destination fields to get text:'),
      '#default_value' => $default_destination,
      '#options' => $destination_fields,
      '#access' => TRUE,
    );

    $form['autotag']['autotag_rebuild_on_submit'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Assign tags on save.'),
      '#options' => array('rebuild' => 'Rebuild on this form submission'),
      '#access' => TRUE,
    );
    array_unshift($form['actions']['submit']['#submit'], 'autotag_form_submit_save_config');
    $form['actions']['submit']['#submit'][] = 'autotag_form_submit_autotag_nodes';
  }

}

/**
 * Save config on form submit.
 */
function autotag_form_submit_save_config($form, FormStateInterface $form_state) {
  $type = $form_state->getValue('type');
  $source = $form_state->getValue('autotag_source_field');
  $destination = $form_state->getValue('autotag_destination_field');
  \Drupal::configFactory()->getEditable('autotag.type.' . $type)
    ->set('source', $source)
    ->save();
  \Drupal::configFactory()->getEditable('autotag.type.' . $type)
    ->set('destination', $destination)
    ->save();

}

/**
 * Autotag all nodes of certain content type on configuration submit.
 *
 * @param array $form
 *   The sended form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The sended form_state.
 */
function autotag_form_submit_autotag_nodes($form, FormStateInterface $form_state) {
  $type = $form_state->getValue('type');
  if ($form_state->getValue('autotag_rebuild_on_submit')['rebuild'] === 'rebuild') {
    $batch = autotag_get_batch_tag_all_nodes($type);
    batch_set($batch);
  }
}

/**
 * Implements hook_node_presave().
 */
function autotag_node_presave(EntityInterface $node) {
  autotag_tag_node($node);
}

/**
 * Asign tags to node depending to bundle configuration.
 *
 * @param EntityInterface $node
 *   The node to autotag.
 */
function autotag_tag_node(EntityInterface &$node) {
  $text_array = array();
  $type = $node->bundle();
  $source = \Drupal::config('autotag.type.' . $type)->get('source');
  $text = '';
  $destination = \Drupal::config('autotag.type.' . $type)->get('destination');
  $vocabularies = $node->getFieldDefinition($destination)->getItemDefinition()->getSettings()['handler_settings']['target_bundles'];
  foreach ($source as $field) {
    if ($field) {
      $text_array[] = $node->get($field)->getValue();
    }
  }

  foreach ($text_array as $item) {
    if (isset($item[0]['summary'])) {
      $text .= strtolower($item[0]['summary']);
    }
    if (isset($item[0]['value'])) {
      $text .= strtolower($item[0]['value']);
    }
  }
  foreach ($vocabularies as $vocabulary) {
    $tree = \Drupal::getContainer()->get('entity.manager')->getStorage('taxonomy_term')->loadTree($vocabulary);
    $current_terms = explode(', ', $node->get($destination)->getString());
    foreach ($tree as $term) {
      $found = strpos($text, strtolower($term->name));
      if ($found !== FALSE && !in_array($term->tid, $current_terms)) {
        $value = array('target_id' => $term->tid);
        $node->{$destination}->appendItem($value);
      }
    }
  }
}

/**
 * Return the batch to autotag all nodes of certaing bundle.
 *
 * @param string $bundle
 *   The bundle to retag.
 *
 * @return array
 *   The batch to execute.
 */
function autotag_get_batch_tag_all_nodes($bundle) {
  $nids = \Drupal::entityQuery('node')
    ->condition('type', $bundle)
    ->execute();

  $batch = array(
    'title' => t('Autotagging all nodes of type %type', array('%type' => $bundle)),
    'operations' => array(),
  );
  foreach ($nids as $nid) {
    $batch['operations'][] = array('autotag_load_and_retag_node', array($nid));
  }

  return $batch;
}

/**
 * Loads a node and autotags it.
 *
 * @param int $nid
 *   The id of the node to load.
 * @param array $context
 *   Batch API parameter.
 */
function autotag_load_and_retag_node($nid, &$context) {
  $node = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->load($nid);
  autotag_tag_node($node);
  $node->save();

  $context['results'][] = 1;
  $context['message'] = 'Node tagged';
}
